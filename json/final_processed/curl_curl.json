[
    {
        "repo_name": "curl/curl",
        "CVE_ID": "CVE-2018-1000005",
        "Problem_Type": "CWE-125",
        "Description": "libcurl 7.49.0 to and including 7.57.0 contains an out bounds read in code handling HTTP/2 trailers. It was reported (https://github.com/curl/curl/pull/2231) that reading an HTTP/2 trailer could mess up future trailers since the stored size was one byte less than required. The problem is that the code that creates HTTP/1-like headers from the HTTP/2 trailer data once appended a string like `:` to the target buffer, while this was recently changed to `: ` (a space was added after the colon) but the following math wasn't updated correspondingly. When accessed, the data is read out of bounds and causes either a crash or that the (too large) data gets passed to client write. This could lead to a denial-of-service situation or an information disclosure if someone has a service that echoes back or uses the trailers for something.",
        "URL": "https://github.com/curl/curl/pull/2231",
        "Tag": "['Issue Tracking', 'Patch', 'Third Party Advisory']",
        "fix_commit_hash": "f1e5a4fa7bc77ea82d11bb258cc3b7207a2db342",
        "inducing_commit_hash_pyszz": "-",
        "inducing_commit_hash_pd": [],
        "matched": []
    },
    {
        "repo_name": "curl/curl",
        "CVE_ID": "CVE-2020-19909",
        "Problem_Type": "CWE-190",
        "Description": "Integer overflow vulnerability in tool_operate.c in curl 7.65.2 via a large value as the retry delay. NOTE: many parties report that this has no direct security impact on the curl user; however, it may (in theory) cause a denial of service to associated systems or networks if, for example, --retry-delay is misinterpreted as a value much smaller than what was intended. This is not especially plausible because the overflow only happens if the user was trying to specify that curl should wait weeks (or longer) before trying to recover from a transient error.",
        "URL": "https://github.com/curl/curl/pull/4166",
        "Tag": "['Patch']",
        "fix_commit_hash": null,
        "inducing_commit_hash_pyszz": [
            "da973165965962a435a23ade336d9a17daf044ef"
        ],
        "inducing_commit_hash_pd": [
            "c349bd668c91f2484ae21c0f361ddf497143093c"
        ],
        "matched": []
    }
]