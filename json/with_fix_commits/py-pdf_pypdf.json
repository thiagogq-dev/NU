[
    {
        "repo_name": "py-pdf/pypdf",
        "CVE_ID": "CVE-2023-36464",
        "Problem_Type": "CWE-835",
        "Description": "pypdf is an open source, pure-python PDF library. In affected versions an attacker may craft a PDF which leads to an infinite loop if `__parse_content_stream` is executed. That is, for example, the case if the user extracted text from such a PDF. This issue was introduced in pull request #969 and resolved in pull request #1828. Users are advised to upgrade. Users unable to upgrade may modify the line `while peek not in (b\"\\r\", b\"\\n\")` in `pypdf/generic/_data_structures.py` to `while peek not in (b\"\\r\", b\"\\n\", b\"\")`.",
        "URL": "https://github.com/py-pdf/pypdf/pull/969",
        "Commit SHA": "72fcaae50e9676ca16346a556c29b688ae2714f8",
        "Tag": "['Issue Tracking', 'Patch']"
    },
    {
        "repo_name": "py-pdf/pypdf",
        "CVE_ID": "CVE-2023-36464",
        "Problem_Type": "CWE-835",
        "Description": "pypdf is an open source, pure-python PDF library. In affected versions an attacker may craft a PDF which leads to an infinite loop if `__parse_content_stream` is executed. That is, for example, the case if the user extracted text from such a PDF. This issue was introduced in pull request #969 and resolved in pull request #1828. Users are advised to upgrade. Users unable to upgrade may modify the line `while peek not in (b\"\\r\", b\"\\n\")` in `pypdf/generic/_data_structures.py` to `while peek not in (b\"\\r\", b\"\\n\", b\"\")`.",
        "URL": "https://github.com/py-pdf/pypdf/pull/1828",
        "Commit SHA": "b0e5c689df689ab173df84dacd77b6fc3c161932",
        "Tag": "['Patch']"
    },
    {
        "repo_name": "py-pdf/pypdf",
        "CVE_ID": "CVE-2023-36807",
        "Problem_Type": "CWE-835",
        "Description": "pypdf is a pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. In version 2.10.5 an attacker who uses this vulnerability can craft a PDF which leads to an infinite loop. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted metadata from such a malformed PDF. Versions prior to 2.10.5 throw an error, but do not hang forever. This issue was fixed with https://github.com/py-pdf/pypdf/pull/1331 which has been included in release 2.10.6. Users are advised to upgrade. Users unable to upgrade should modify `PyPDF2/generic/_data_structures.py::read_object` to an an error throwing case. See GHSA-hm9v-vj3r-r55m for details. ",
        "URL": "https://github.com/py-pdf/pypdf/pull/1331",
        "Commit SHA": "e6531a25325e7e0174b6a1ba03b57320b5227f6b",
        "Tag": "['Patch']"
    },
    {
        "repo_name": "py-pdf/pypdf",
        "CVE_ID": "CVE-2023-36810",
        "Problem_Type": "CWE-407",
        "Description": "pypdf is a pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime. This quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. This issue has been addressed in PR 808 and versions from 1.27.9 include this fix. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
        "URL": "https://github.com/py-pdf/pypdf/pull/808",
        "Commit SHA": "c6c56f550bb384e05f0139c796ba1308837d6373",
        "Tag": "['Patch']"
    },
    {
        "repo_name": "py-pdf/pypdf",
        "CVE_ID": "CVE-2023-46250",
        "Problem_Type": "CWE-835",
        "Description": "pypdf is a free and open-source pure-python PDF library. An attacker who uses a vulnerability present in versions 3.7.0 through 3.16.4 can craft a PDF which leads to an infinite loop. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case when the pypdf-user manipulates an incoming malicious PDF e.g. by merging it with another PDF or by adding annotations. The issue was fixed in version 3.17.0. As a workaround, apply the patch manually by modifying `pypdf/generic/_data_structures.py`.",
        "URL": "https://github.com/py-pdf/pypdf/pull/2264",
        "Commit SHA": "9b23ac3c9619492570011d551d521690de9a3e2d",
        "Tag": "['Issue Tracking', 'Patch']"
    }
]